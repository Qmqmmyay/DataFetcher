Metadata-Version: 2.4
Name: vnstock_pipeline
Version: 2.0
Summary: A flexible scheduler for fetching and managing stock data
Home-page: https://github.com/yourusername/vnstock_pipeline
Author: Thinh Vu
Author-email: mrthinh@live.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Developers
Classifier: Topic :: Office/Business :: Financial
Classifier: Topic :: Software Development :: Libraries
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: pandas>=1.0.0
Requires-Dist: duckdb>=1.2.0
Requires-Dist: vnstock>=3.2.3
Requires-Dist: tqdm>=4.67.1
Requires-Dist: requests>=2.31.0
Requires-Dist: asyncio>=3.4.3
Requires-Dist: nest-asyncio>=1.6.0
Requires-Dist: aiohttp>=3.11.3
Requires-Dist: vnai>=2.0.2
Requires-Dist: vnstock>=3.2.3
Requires-Dist: vnii>=0.0.6
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Architecture

```
vnstock_pipeline/
├── core/
│   ├── __init__.py
│   ├── fetcher.py       # Abstract Fetcher class
│   ├── validator.py     # Abstract Validator class
│   ├── transformer.py   # Abstract Transformer class
│   ├── exporter.py      # Abstract Exporter + CSVExport, DuckDBExport
│   └── scheduler.py     # The Scheduler orchestrator
├── template/
│   ├── __init__.py
│   └── vn.py          # VN-specific base classes: VNFetcher, VNValidator, VNTransformer
├── utils/
│   ├── __init__.py
│   ├── deduplication.py   # Functions for deduplication of data
│   ├── governance.py      # Data governance utilities and checks
│   ├── fetcher_helper.py  # Helpers for advanced fetching (e.g., caching, retry wrappers)
│   └── logger.py          # Preconfigured logging and error reporting utilities
├── tasks/
│   ├── __init__.py
│   ├── ohlcv_daily.py   # Task module for daily OHLCV data using VN templates
│   └── financial.py     # Task module for financial data tasks
├── tests/
│   ├── __init__.py
│   ├── test_fetcher.py
│   ├── test_validator.py
│   ├── test_transformer.py
│   ├── test_exporter.py
│   └── test_scheduler.py
└── README.md

```

## Explanation
### **core/**

This directory contains the fundamental building blocks of the scheduler framework:

- **fetcher.py (Fetcher):**
    
    - **Purpose:** Defines an abstract class that specifies how to fetch raw data.
        
    - **Usage:** Any concrete fetcher must implement the `fetch(ticker, **kwargs)` method, ensuring consistent interface for retrieving data.
        
- **validator.py (Validator):**
    
    - **Purpose:** Provides the abstract interface for data validation.
        
    - **Usage:** Implement the `validate(data)` method in subclasses to check the integrity and completeness of fetched data.
        
- **transformer.py (Transformer):**
    
    - **Purpose:** Specifies the contract for transforming raw data into a standardized format.
        
    - **Usage:** Implement `transform(data)` for tasks such as data cleaning, date parsing, and column normalization.
        
- **exporter.py (Exporter):**
    
    - **Purpose:** Outlines how transformed data should be exported to storage systems.
        
    - **Usage:** Contains an abstract exporter plus built-in concrete classes like `CSVExport` and `DuckDBExport`. Also includes an optional `preview(ticker, n)` method to support incremental updates.
        
- **scheduler.py (Scheduler):**
    
    - **Purpose:** Acts as the workflow orchestrator that ties together fetching, validating, transforming, and exporting data.
        
    - **Usage:** Accepts concrete implementations of the core classes, manages retries and error handling, and logs processing outcomes.
        

### **template/**

This folder offers VN‑specific base classes that are preconfigured to work with the official vnstock data source. They extend the core abstractions:

- **vn.py:**
    
    - **Purpose:** Provides default implementations for VN data tasks.
        
    - **Components:**
        
        - **VNFetcher:** Implements standard fetching logic by internally calling official vnstock functions.
            
        - **VNValidator:** Implements common checks such as verifying required columns (e.g., ticker, date, open, high, low, close, volume).
            
        - **VNTransformer:** Provides default data transformations (e.g., date conversion, sorting) tailored to vnstock output.
            
- **Benefit:**
    
    - Users can simply extend these base classes if they want to quickly set up a pipeline with minimal custom code. Alternatively, they can bypass the template and directly implement the core interfaces for more customized logic.
        

### **utils/**

The utilities folder collects shared helper functions that address common challenges in data governance and fetching:

- **deduplication.py:**
    
    - **Purpose:** Contains functions to remove duplicate entries from datasets.
        
    - **Usage:** Useful across tasks for ensuring data integrity.
        
- **governance.py:**
    
    - **Purpose:** Implements data governance checks and policies (e.g., mandatory field checks, business rule validations).
        
    - **Usage:** Can be imported by validators or the scheduler for additional consistency checks.
        
- **fetcher_helper.py:**
    
    - **Purpose:** Provides helper functions for advanced fetching scenarios such as caching, session management, and retry logic.
        
    - **Usage:** Enhances concrete fetcher implementations with robust error handling and efficiency.
        
- **logger.py:**
    
    - **Purpose:** Offers preconfigured logging setups and error reporting functions.
        
    - **Usage:** Ensures consistent log formatting and helps with debugging across the framework.
        

### **tasks/**

This directory holds the concrete task implementations. They are examples or production-ready modules that leverage either the VN templates or direct core implementations:

- **ohlcv_daily.py:**
    
    - **Purpose:** Implements the daily OHLCV data fetching task using the VN-specific base classes from the template.
        
    - **Usage:** Provides a ready-to-use pipeline for daily stock data.
        
- **financial.py:**
    
    - **Purpose:** Implements tasks related to fetching and processing financial data.
        
    - **Usage:** Demonstrates how the framework can be extended to handle various data types beyond OHLCV.
        

### **tests/**

Contains the unit and integration tests to ensure each module works correctly:

- **Purpose:**
    
    - Each test module corresponds to a component in the core (e.g., fetcher, validator, transformer, exporter) or the overall scheduler.
        
    - Integration tests verify that the entire workflow (from fetching to exporting) operates as expected.
        
    - **Usage:** Run tests to validate changes and ensure robustness before deployment.
        

### **README.md**

- **Purpose:**
    
    - Provides an overview of the project, instructions for installation, usage examples, and guidelines for extending the framework.
        
    - **Usage:** Serves as the primary entry point for new users and contributors.

# Test

```bash
python3.10 -m unittest discover -s tests -t .
```
# Conversation

https://chatgpt.com/g/g-p-67691d207b5081919a877cd640aa9949-vns/c/67e61226-7ec4-8006-9804-a10c4ff6488d
