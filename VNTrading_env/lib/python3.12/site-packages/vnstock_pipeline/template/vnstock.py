"""
Các lớp cơ sở VN-specific để xử lý dữ liệu từ vnstock.
"""
import abc
import logging
import pandas as pd

from vnstock_pipeline.core.fetcher import Fetcher
from vnstock_pipeline.core.validator import Validator
from vnstock_pipeline.core.transformer import Transformer

logger = logging.getLogger(__name__)

class VNFetcher(Fetcher, abc.ABC):
    """
    Lớp cơ sở VNFetcher sử dụng thư viện vnstock chính thức.
    Các lớp con cần override phương thức _vn_call để thực hiện lời gọi vnstock cụ thể.
    """
    def __init__(self):
        # Khởi tạo cấu hình VN-specific nếu cần
        pass

    @abc.abstractmethod
    def _vn_call(self, ticker: str, **kwargs) -> pd.DataFrame:
        """
        Phương thức cần được override để gọi hàm của vnstock (ví dụ: stock.quote.history).
        
        :param ticker: Mã chứng khoán.
        :param kwargs: Các tham số bổ sung.
        :return: DataFrame chứa dữ liệu lấy từ vnstock.
        """
        raise NotImplementedError

    def fetch(self, ticker: str, **kwargs) -> pd.DataFrame:
        """
        Thực hiện gọi hàm _vn_call và xử lý lỗi cơ bản.
        
        :param ticker: Mã chứng khoán.
        :param kwargs: Các tham số bổ sung.
        :return: DataFrame chứa dữ liệu thô.
        """
        try:
            data = self._vn_call(ticker, **kwargs)
            logger.debug(f"Lấy được {len(data)} bản ghi cho {ticker}.")
            return data
        except Exception as e:
            logger.error(f"Lỗi khi lấy dữ liệu cho {ticker}: {e}")
            raise

class VNValidator(Validator):
    """
    Lớp cơ sở VNValidator để kiểm tra dữ liệu lấy từ vnstock.
    """
    required_columns = []

    def validate(self, data: pd.DataFrame) -> bool:
        """
        Kiểm tra dữ liệu có phải là DataFrame và chứa các cột cần thiết không.
        
        :param data: DataFrame chứa dữ liệu.
        :return: True nếu hợp lệ, ngược lại False.
        """
        if not isinstance(data, pd.DataFrame):
            logger.error("Dữ liệu không phải là DataFrame.")
            return False
        missing = [col for col in self.required_columns if col not in data.columns]
        if missing:
            logger.warning(f"Thiếu các cột: {missing}")
            return False
        return True

class VNTransformer(Transformer):
    """
    Lớp cơ sở VNTransformer để chuyển đổi dữ liệu lấy từ vnstock.
    """
    def transform(self, data: pd.DataFrame) -> pd.DataFrame:
        """
        Chuyển đổi dữ liệu: chuyển cột 'time' hoặc 'date' sang kiểu datetime, sắp xếp và reset index.
        
        :param data: DataFrame chứa dữ liệu thô.
        :return: DataFrame đã chuyển đổi.
        """
        df = data.copy()
        if "time" in df.columns:
            df["time"] = pd.to_datetime(df["time"], errors="coerce")
            df.sort_values("time", inplace=True)
            df.reset_index(drop=True, inplace=True)
        elif "date" in df.columns:
            df["date"] = pd.to_datetime(df["date"], errors="coerce")
            df.sort_values("date", inplace=True)
            df.reset_index(drop=True, inplace=True)
        logger.debug("Đã chuyển đổi dữ liệu theo mặc định.")
        return df
