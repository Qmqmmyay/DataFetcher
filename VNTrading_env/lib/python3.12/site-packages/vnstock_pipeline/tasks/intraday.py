"""
Module xử lý dữ liệu intraday sử dụng các lớp VN cơ sở.
Cho phép tải dữ liệu theo 2 chế độ:
- EOD: Lấy dữ liệu tĩnh một lần.
- live: Cập nhật dữ liệu liên tục trong phiên giao dịch, với kiểm tra giờ giao dịch.
         Trong live mode, trước mỗi lần cập nhật, sẽ kiểm tra market_hours để đảm bảo
         rằng thị trường đang mở. Nếu thị trường đóng (hoặc trong giờ nghỉ), vòng lặp sẽ dừng.
"""

import time
import os
from pathlib import Path
from datetime import datetime

import pandas as pd
from vnstock import Vnstock
from vnstock_data.explorer.vci import Quote
from vnstock_pipeline.template.vnstock import VNFetcher, VNValidator, VNTransformer
from vnstock_pipeline.utils.deduplication import drop_duplicates
from vnstock_pipeline.utils.market_hours import trading_hours  # Import market hours utility

class IntradayFetcher(VNFetcher):
    """
    Lớp thực hiện việc lấy dữ liệu intraday từ vnstock.
    """
    def _vn_call(self, ticker: str, **kwargs) -> pd.DataFrame:
        # Lấy tham số page_size từ kwargs, mặc định là 10000
        page_size = kwargs.get("page_size", 50000)
        # Khởi tạo đối tượng stock từ vnstock với mã và nguồn VCI
        quote = Quote(symbol=ticker)
        # Gọi hàm intraday để lấy dữ liệu intraday
        data = quote.intraday(page_size=page_size)
        return data

class IntradayValidator(VNValidator):
    """
    Lớp kiểm tra dữ liệu intraday từ vnstock.
    """
    # Xác định các cột cần có trong dữ liệu intraday
    required_columns = ["time", "price", "volume", "match_type", "id"]

class IntradayTransformer(VNTransformer):
    """
    Lớp chuyển đổi dữ liệu intraday từ vnstock.
    """
    def transform(self, data: pd.DataFrame) -> pd.DataFrame:
        # Sử dụng phương thức chuyển đổi mặc định của VNTransformer
        df = super().transform(data)
        # Loại bỏ các bản ghi trùng lặp dựa trên 'time' và 'id'
        df = drop_duplicates(df, subset=["time", "id"])
        return df

def run_intraday_task(tickers: list, interval: int = 60, mode: str = "live"):
    """
    Chạy quy trình xử lý dữ liệu intraday cho danh sách mã chứng khoán.
    
    Nếu mode = "EOD":
        - Lấy dữ liệu tĩnh một lần và lưu ra file CSV.
    Nếu mode = "live":
        - Cập nhật dữ liệu liên tục trong phiên giao dịch.
        - Trước mỗi lần cập nhật, kiểm tra giờ giao dịch bằng market_hours.
        - Nếu thị trường không mở, dừng vòng lặp.
    
    :param tickers: Danh sách mã chứng khoán.
    :param interval: Thời gian chờ giữa các lần cập nhật (giây) trong live mode.
    :param mode: "live" để cập nhật liên tục hoặc "EOD" để tải dữ liệu một lần.
    """
    from vnstock_pipeline.core.scheduler import Scheduler
    from vnstock_pipeline.core.exporter import CSVExport

    # Tạo các thành phần dùng chung
    fetcher = IntradayFetcher()
    validator = IntradayValidator()
    transformer = IntradayTransformer()
    
    if mode.lower() == "eod":
        print("Chế độ EOD: Lấy dữ liệu intraday tĩnh một lần.")
        exporter = CSVExport(base_path="./data/intraday")
        scheduler = Scheduler(fetcher, validator, transformer, exporter)
        scheduler.run(tickers)
        print("EOD download hoàn thành.")
    else:
        print("Chế độ live: Cập nhật dữ liệu intraday liên tục trong phiên giao dịch.")
        exporter = CSVExport(base_path="./data/intraday")
        scheduler = Scheduler(fetcher, validator, transformer, exporter)
        # Trong live mode, file sẽ được ghi đè mỗi lần cập nhật.
        # Bạn có thể thêm cơ chế sao lưu file nếu cần.
        while True:
            try:
                # Check market hours before updating
                market_status = trading_hours(market="HOSE", enable_log=True, language="en")
                if not market_status["is_trading_hour"]:
                    print("Ngoài giờ giao dịch. Dừng vòng lặp.")
                    break

                scheduler.run(tickers)
            except Exception as e:
                print(f"Error updating intraday data: {e}")
            time.sleep(interval)

if __name__ == "__main__":
    sample_tickers = ["ACB", "VCB", "HPG"]
    # Chọn mode: "live" hoặc "EOD"
    run_intraday_task(sample_tickers, interval=60, mode="live")
