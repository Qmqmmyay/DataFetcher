"""
Module xử lý dữ liệu Price Board sử dụng template VN của vnstock_pipeline.
Lấy dữ liệu bảng giá phiên giao dịch cho danh sách mã chứng khoán từ vnstock,
áp dụng các bước kiểm tra và chuyển đổi mặc định, sau đó lưu lại các giao dịch
(các lần cập nhật) kèm thời gian cập nhật (update_unix và update_time) vào file CSV.
Người dùng có thể chọn chế độ tải về:
- EOD: Lấy dữ liệu tĩnh một lần (End Of Day)
- live: Liên tục cập nhật dữ liệu trong phiên giao dịch.
Nếu dữ liệu không thay đổi (ngoại trừ timestamp) hoặc ngoài giờ giao dịch,
thì dừng việc lấy dữ liệu.
"""

import time
import os
from pathlib import Path
from datetime import datetime

import pandas as pd
from vnstock import Vnstock
from vnstock_pipeline.utils.deduplication import drop_duplicates
from vnstock_pipeline.template.vnstock import VNFetcher, VNValidator, VNTransformer
from vnstock_pipeline.utils.market_hours import trading_hours  # Market Trading Hours Utility

# Đường dẫn và thư mục lưu file giao dịch Price Board
DATA_DIR = Path("./data/price_board")
DATA_DIR.mkdir(parents=True, exist_ok=True)
OUTPUT = DATA_DIR / "price_board_transactions.csv"

class PriceBoardFetcher(VNFetcher):
    """
    Lớp PriceBoardFetcher sử dụng template VN để lấy dữ liệu Price Board từ vnstock.
    Vì dữ liệu Price Board được lấy cho nhiều mã cùng lúc, nên tham số ticker không được dùng.
    Danh sách mã được lưu trong thuộc tính self.tickers.
    """
    def _vn_call(self, ticker: str, **kwargs) -> pd.DataFrame:
        # Use the tickers list stored in the instance
        tickers = getattr(self, "tickers", None)
        if not tickers:
            raise ValueError("Chưa thiết lập danh sách mã cho PriceBoardFetcher (self.tickers).")
        # Sử dụng ticker đầu tiên chỉ để khởi tạo đối tượng stock
        stock = Vnstock().stock(symbol=tickers[0], source="VCI")
        data = stock.trading.price_board(tickers, flatten_columns=True, drop_levels=[0])
        return data

class PriceBoardValidator(VNValidator):
    """
    Lớp PriceBoardValidator kiểm tra dữ liệu Price Board từ vnstock.
    Kiểm tra xem dữ liệu có phải là DataFrame và có chứa cột 'symbol' không.
    """
    def validate(self, data: pd.DataFrame) -> bool:
        if not isinstance(data, pd.DataFrame):
            print("Dữ liệu không phải là DataFrame.")
            return False
        if "symbol" not in data.columns:
            print("Thiếu cột 'symbol' trong dữ liệu Price Board.")
            return False
        return True

class PriceBoardTransformer(VNTransformer):
    """
    Lớp PriceBoardTransformer chuyển đổi dữ liệu Price Board từ vnstock.
    Chuyển đổi cột 'last_trading_date' sang kiểu datetime và loại bỏ các bản ghi trùng lặp.
    """
    def transform(self, data: pd.DataFrame) -> pd.DataFrame:
        if "last_trading_date" in data.columns:
            data["last_trading_date"] = pd.to_datetime(data["last_trading_date"], errors="coerce")
        data = drop_duplicates(data, subset=["symbol"])
        return data

def append_with_timestamp(df: pd.DataFrame, path: Path):
    """
    Append new data with timestamp columns into the CSV file atomically.
    
    Thêm cột 'update_unix' (Unix timestamp) và 'update_time' (chuỗi định dạng)
    vào DataFrame và sau đó append vào file CSV.
    
    :param df: DataFrame chứa dữ liệu Price Board mới.
    :param path: Đường dẫn đến file CSV.
    """
    now = datetime.now()
    df["update_unix"] = int(now.timestamp())
    df["update_time"] = now.strftime("%Y-%m-%d %H:%M:%S")
    
    if path.exists():
        df.to_csv(path, mode="a", header=False, index=False)
    else:
        df.to_csv(path, mode="w", header=True, index=False)
    print(f"Data appended at {df['update_time'].iloc[0]} (Unix: {df['update_unix'].iloc[0]})")

def run_price_board(tickers: list, interval: int = 60, mode: str = "live"):
    """
    Chạy quy trình xử lý dữ liệu Price Board cho danh sách mã chứng khoán sử dụng template VN.
    
    Nếu mode = "live":
        - Liên tục cập nhật dữ liệu trong phiên giao dịch, so sánh dữ liệu mới với dữ liệu lần cập nhật trước.
        - Nếu dữ liệu không thay đổi (ngoại trừ thời gian) hoặc ngoài giờ giao dịch, dừng vòng lặp.
    Nếu mode = "EOD":
        - Lấy dữ liệu tĩnh một lần và lưu ra file CSV.
    
    :param tickers: Danh sách mã chứng khoán.
    :param interval: Thời gian chờ giữa các lần cập nhật (tính bằng giây) trong live mode.
    :param mode: "live" để cập nhật liên tục hoặc "EOD" để lấy dữ liệu một lần.
    """
    from vnstock_pipeline.core.scheduler import Scheduler

    # Tạo các instance dựa trên template
    fetcher = PriceBoardFetcher()
    validator = PriceBoardValidator()
    transformer = PriceBoardTransformer()

    # Set the tickers list into the fetcher instance.
    fetcher.tickers = tickers

    scheduler = Scheduler(fetcher, validator, transformer, None, retry_attempts=1)

    if mode.lower() == "eod":
        print("Chế độ EOD: Lấy dữ liệu Price Board tĩnh một lần.")
        data = fetcher.fetch("dummy")  # no keyword arguments needed
        if not validator.validate(data):
            print("Dữ liệu không hợp lệ, không lưu.")
        else:
            data = transformer.transform(data)
            append_with_timestamp(data, OUTPUT)
        print("EOD download hoàn thành.")
    else:
        print("Chế độ live: Cập nhật dữ liệu Price Board liên tục trong phiên giao dịch.")
        last_data = None
        while True:
            try:
                # Kiểm tra giờ giao dịch trước mỗi lần cập nhật
                market_status = trading_hours(market="HOSE", enable_log=True, language="en")
                if not market_status["is_trading_hour"]:
                    print("Ngoài giờ giao dịch. Dừng vòng lặp.")
                    break

                scheduler.run(tickers)
                new_data = fetcher.fetch("dummy")
                if not validator.validate(new_data):
                    print("Dữ liệu không hợp lệ, bỏ qua lần cập nhật này.")
                else:
                    new_data = transformer.transform(new_data)
                    # So sánh new_data với last_data (loại bỏ cột timestamp)
                    if last_data is not None:
                        cmp_new = new_data.drop(columns=["update_unix", "update_time"], errors="ignore")
                        cmp_last = last_data.drop(columns=["update_unix", "update_time"], errors="ignore")
                        if cmp_new.equals(cmp_last):
                            print("Dữ liệu không thay đổi. Phiên giao dịch có thể đã kết thúc. Dừng vòng lặp.")
                            break
                    append_with_timestamp(new_data, OUTPUT)
                    last_data = new_data.copy()
            except Exception as e:
                print(f"Error updating price board: {e}")
            time.sleep(interval)

if __name__ == "__main__":
    # Danh sách mã VN30 mẫu
    TICKERS = [
        'ACB', 'BCM', 'BID', 'BVH', 'CTG', 'FPT', 'GAS', 'GVR',
        'HDB', 'HPG', 'LPB', 'MBB', 'MSN', 'MWG', 'PLX', 'SAB',
        'SHB', 'SSB', 'SSI', 'STB', 'TCB', 'TPB', 'VCB', 'VHM',
        'VIB', 'VIC', 'VJC', 'VNM', 'VPB', 'VRE'
    ]
    # Chọn mode: "live" hoặc "EOD"
    run_price_board(TICKERS, interval=60, mode="live")
