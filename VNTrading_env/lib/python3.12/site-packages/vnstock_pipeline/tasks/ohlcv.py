"""
Module xử lý dữ liệu OHLCV hàng ngày sử dụng các lớp VN cơ sở.
"""

import pandas as pd
from vnstock_pipeline.template.vnstock import VNFetcher, VNValidator, VNTransformer
from vnstock_pipeline.utils.deduplication import drop_duplicates
from vnstock_data.explorer.vci import Quote

class OHLCVDailyFetcher(VNFetcher):
    """
    Lớp thực hiện việc lấy dữ liệu OHLCV hàng ngày từ vnstock.
    """
    def _vn_call(self, ticker: str, **kwargs) -> pd.DataFrame:
        # Lấy các tham số từ kwargs, nếu không có thì dùng giá trị mặc định
        start = kwargs.get("start", "2024-01-01")
        end = kwargs.get("end", "2025-03-19")
        interval = kwargs.get("interval", "1D")
        # Khởi tạo đối tượng Quote từ vnstock_data.explorer.vci cho mã chứng khoán
        quote = Quote(symbol=ticker)
        # Gọi hàm history để lấy dữ liệu OHLCV lịch sử với các tham số đã cho
        data = quote.history(start=start, end=end, interval=interval)
        return data

class OHLCVDailyValidator(VNValidator):
    """
    Lớp kiểm tra dữ liệu OHLCV hàng ngày từ vnstock.
    """
    # Các cột cần có trong dữ liệu OHLCV
    required_columns = ["time", "open", "high", "low", "close", "volume"]

class OHLCVDailyTransformer(VNTransformer):
    """
    Lớp chuyển đổi dữ liệu OHLCV hàng ngày từ vnstock.
    """
    def transform(self, data: pd.DataFrame) -> pd.DataFrame:
        # Gọi phương thức chuyển đổi mặc định của VNTransformer
        df = super().transform(data)
        # Loại bỏ các bản ghi trùng lặp dựa trên cột 'time'
        df = drop_duplicates(df, subset=["time"])
        return df

def run_task(tickers: list, **kwargs):
    """
    Chạy quy trình xử lý dữ liệu OHLCV hàng ngày cho danh sách mã chứng khoán.
    
    :param tickers: Danh sách mã chứng khoán.
    :param kwargs: Các tham số bổ sung cho việc lấy dữ liệu, ví dụ: start, end, interval.
    """
    from vnstock_pipeline.core.scheduler import Scheduler
    from vnstock_pipeline.core.exporter import CSVExport

    fetcher = OHLCVDailyFetcher()
    validator = OHLCVDailyValidator()
    transformer = OHLCVDailyTransformer()
    exporter = CSVExport(base_path="./data/ohlcv")
    
    # Lưu các tham số bổ sung vào fetcher
    fetcher.params = kwargs

    # Override fetcher.fetch để luôn truyền fetcher.params vào _vn_call
    original_fetch = fetcher.fetch
    def new_fetch(ticker: str):
        return original_fetch(ticker, **(fetcher.params or {}))
    fetcher.fetch = new_fetch

    scheduler = Scheduler(fetcher, validator, transformer, exporter)
    scheduler.run(tickers)

if __name__ == "__main__":
    sample_tickers = ["ACB", "VCB", "HPG"]
    run_task(sample_tickers, start="2024-01-01", end="2025-03-19", interval="1D")
