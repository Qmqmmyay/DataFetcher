"""
Module xử lý dữ liệu báo cáo tài chính sử dụng các lớp VN cơ sở.
Lớp này lấy các báo cáo tài chính (cân đối kế toán, báo cáo kết quả kinh doanh năm và quý,
lưu chuyển tiền tệ và tỉ số) từ vnstock và lưu chúng ra các file CSV riêng biệt.
"""

import os
from pathlib import Path
import pandas as pd
from vnstock_data.explorer.vci import Finance

# Import các lớp VN base từ template
from vnstock_pipeline.template.vnstock import VNFetcher, VNValidator, VNTransformer

class FinancialFetcher(VNFetcher):
    """
    Lớp thực hiện việc lấy dữ liệu báo cáo tài chính từ vnstock.
    Phương thức _vn_call trả về một dictionary chứa các DataFrame cho từng loại báo cáo.
    Các tham số bổ sung (kwargs) có thể được dùng để thay đổi period, lang, dropna, etc.
    """
    def _vn_call(self, ticker: str, **kwargs) -> dict:
        fin = Finance(symbol=ticker)
        # Các giá trị mặc định cho các report
        bs_period = kwargs.get("balance_sheet_period", "year")
        is_year_period = kwargs.get("income_statement_year_period", "year")
        is_quarter_period = kwargs.get("income_statement_quarter_period", "quarter")
        cf_period = kwargs.get("cash_flow_period", "year")
        ratio_period = kwargs.get("ratio_period", "year")
        
        lang = kwargs.get("lang", "vi")
        dropna = kwargs.get("dropna", True)
        
        reports = {}
        try:
            reports["balance_sheet"] = fin.balance_sheet(period=bs_period, lang=lang, dropna=dropna)
        except Exception as e:
            reports["balance_sheet"] = None
            print(f"Lỗi khi lấy balance_sheet cho {ticker}: {e}")
        try:
            reports["income_statement_year"] = fin.income_statement(period=is_year_period, lang=lang, dropna=dropna)
        except Exception as e:
            reports["income_statement_year"] = None
            print(f"Lỗi khi lấy income_statement_year cho {ticker}: {e}")
        try:
            reports["income_statement_quarter"] = fin.income_statement(period=is_quarter_period, lang=lang, dropna=dropna)
        except Exception as e:
            reports["income_statement_quarter"] = None
            print(f"Lỗi khi lấy income_statement_quarter cho {ticker}: {e}")
        try:
            reports["cash_flow"] = fin.cash_flow(period=cf_period, lang=lang, dropna=dropna)
        except Exception as e:
            reports["cash_flow"] = None
            print(f"Lỗi khi lấy cash_flow cho {ticker}: {e}")
        try:
            reports["ratio"] = fin.ratio(period=ratio_period, lang=lang, dropna=dropna)
        except Exception as e:
            reports["ratio"] = None
            print(f"Lỗi khi lấy ratio cho {ticker}: {e}")
        return reports

class FinancialValidator(VNValidator):
    """
    Lớp kiểm tra dữ liệu báo cáo tài chính từ vnstock.
    Kiểm tra dictionary trả về có chứa ít nhất một DataFrame hợp lệ.
    """
    def validate(self, data: dict) -> bool:
        if not isinstance(data, dict):
            print("Dữ liệu không phải là dictionary.")
            return False
        # Ensure at least one report is valid (non-empty DataFrame)
        for key, df in data.items():
            if df is not None and isinstance(df, pd.DataFrame) and not df.empty:
                return True
        print("Không có báo cáo tài chính hợp lệ nào được lấy.")
        return False

class FinancialTransformer(VNTransformer):
    """
    Lớp chuyển đổi dữ liệu báo cáo tài chính từ vnstock.
    Ở đây dữ liệu được giữ nguyên (pass-through) vì mục tiêu là lưu dữ liệu thô.
    """
    def transform(self, data: dict) -> dict:
        # Có thể thêm xử lý chuyển đổi nếu cần
        return data

class FinancialExporter:
    """
    Exporter chuyên dụng cho dữ liệu tài chính.
    Lưu từng báo cáo tài chính ra file CSV riêng biệt trong thư mục chỉ định.
    """
    def __init__(self, base_path: str):
        self.base_path = base_path
        Path(self.base_path).mkdir(parents=True, exist_ok=True)
    
    def export(self, data, ticker: str, **kwargs):
        # data is expected to be a dictionary of DataFrames
        for report_name, df in data.items():
            if df is not None and not df.empty:
                file_path = os.path.join(self.base_path, f"{ticker}_{report_name}.csv")
                df.to_csv(file_path, index=False)
                print(f"Đã lưu {report_name} cho {ticker} vào {file_path}")
    
    def preview(self, ticker: str, n: int = 5, **kwargs):
        # Preview không áp dụng cho dữ liệu tài chính thô
        return None

def run_financial_task(tickers: list, **kwargs):
    """
    Chạy quy trình xử lý dữ liệu báo cáo tài chính cho danh sách mã chứng khoán.
    
    Mỗi báo cáo sẽ được lưu ra file CSV riêng biệt trong thư mục ./data/financial.
    
    :param tickers: Danh sách mã chứng khoán.
    :param kwargs: Các tham số bổ sung cho việc lấy báo cáo, ví dụ: 
                   balance_sheet_period, income_statement_year_period, income_statement_quarter_period,
                   cash_flow_period, ratio_period, lang, dropna.
    """
    from vnstock_pipeline.core.scheduler import Scheduler

    fetcher = FinancialFetcher()
    validator = FinancialValidator()
    transformer = FinancialTransformer()
    # Sử dụng FinancialExporter thay vì CSVExport của core, vì dữ liệu là dictionary
    exporter = FinancialExporter(base_path="./data/financial")
    
    # Lưu các tham số bổ sung vào fetcher để truyền cho _vn_call()
    fetcher.params = kwargs

    # Override fetcher.fetch để luôn truyền các tham số bổ sung
    original_fetch = fetcher.fetch
    def new_fetch(ticker: str):
        return original_fetch(ticker, **(fetcher.params or {}))
    fetcher.fetch = new_fetch

    scheduler = Scheduler(fetcher, validator, transformer, exporter, retry_attempts=1)
    scheduler.run(tickers)

if __name__ == "__main__":
    sample_tickers = ["ACB", "VCB", "HPG"]
    # Các tham số có thể được điều chỉnh: có thể set period cho từng báo cáo, ngôn ngữ, dropna,...
    run_financial_task(sample_tickers,
                       balance_sheet_period="year",
                       income_statement_year_period="year",
                       income_statement_quarter_period="quarter",
                       cash_flow_period="year",
                       ratio_period="year",
                       lang="vi",
                       dropna=True)
