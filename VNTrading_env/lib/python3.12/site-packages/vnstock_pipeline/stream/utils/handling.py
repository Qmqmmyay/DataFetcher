"""
Utilities
========

Utility functions for the vnstock_pipeline.stream package.
"""

import logging
import os
import sys
from typing import Optional

def setup_logging(
    level: int = logging.INFO,
    log_file: Optional[str] = "vnstock_pipeline.stream.log",
    console: bool = True,
    file_level: Optional[int] = None,
    console_level: Optional[int] = None
) -> None:
    """
    Set up logging for the vnstock_pipeline.stream package.
    
    Args:
        level (int): Default logging level
        log_file (Optional[str]): Path to log file or None to disable file logging
        console (bool): Whether to log to console
        file_level (Optional[int]): Specific level for file logging (defaults to level)
        console_level (Optional[int]): Specific level for console logging (defaults to level)
    """
    # Set up the root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(level)
    
    # Clear existing handlers
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # Create formatters
    file_formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    console_formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - %(message)s'
    )
    
    # Set up file logging if requested
    if log_file:
        # Create directory if it doesn't exist
        log_dir = os.path.dirname(log_file)
        if log_dir and not os.path.exists(log_dir):
            os.makedirs(log_dir, exist_ok=True)
            
        # Add file handler
        file_handler = logging.FileHandler(log_file)
        file_handler.setLevel(file_level or level)
        file_handler.setFormatter(file_formatter)
        root_logger.addHandler(file_handler)
    
    # Set up console logging if requested
    if console:
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(console_level or level)
        console_handler.setFormatter(console_formatter)
        root_logger.addHandler(console_handler)
    
    logging.info("Logging initialized")


def chunk_list(lst, chunk_size):
    """
    Split a list into smaller chunks.
    
    Args:
        lst (list): The list to split
        chunk_size (int): The maximum size of each chunk
        
    Returns:
        list: List of chunks
    """
    return [lst[i:i + chunk_size] for i in range(0, len(lst), chunk_size)]


def safe_float(value, default=None):
    """
    Safely convert a value to float.
    
    Args:
        value: The value to convert
        default: Default value if conversion fails
        
    Returns:
        float or default: The converted value or default
    """
    try:
        return float(value)
    except (ValueError, TypeError):
        return default


def safe_int(value, default=None):
    """
    Safely convert a value to int.
    
    Args:
        value: The value to convert
        default: Default value if conversion fails
        
    Returns:
        int or default: The converted value or default
    """
    try:
        return int(value)
    except (ValueError, TypeError):
        return default