"""
Data Parsers
===========

Classes for parsing and normalizing market data from various sources.
"""

import datetime
import time
import logging
from abc import ABC, abstractmethod
from typing import Dict, Any, List, Optional, Union

class BaseDataParser(ABC):
    """
    Base abstract class for parsing market data.
    
    All data parsers must inherit from this class and implement the
    parse_data method to handle source-specific data formats.
    """
    
    def __init__(self):
        """Initialize the data parser."""
        self.logger = logging.getLogger(self.__class__.__name__)
    
    @abstractmethod
    def parse_data(self, raw_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Parse and normalize raw data.
        
        Args:
            raw_data (Dict[str, Any]): The raw data from the source
            
        Returns:
            Dict[str, Any]: The parsed and normalized data
        """
        pass


class FinancialDataParser(BaseDataParser):
    """
    Base class for parsing financial market data.
    
    This class provides common functionality for parsing financial data
    and can be extended by source-specific parsers.
    """
    
    def __init__(self):
        """Initialize the financial data parser."""
        super().__init__()
    
    def parse_data(self, raw_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Parse and normalize financial market data.
        
        Args:
            raw_data (Dict[str, Any]): The raw data from the source
            
        Returns:
            Dict[str, Any]: The parsed and normalized data
        """
        event_type = raw_data.get("event_type", "")
        data = raw_data.get("data", {})
        timestamp = raw_data.get("timestamp", time.time())
        
        # Format timestamp
        dt = datetime.datetime.fromtimestamp(timestamp)
        formatted_timestamp = dt.strftime("%Y-%m-%d %H:%M:%S")
        
        # Base result with common fields
        result = {
            "timestamp": timestamp,
            "formatted_timestamp": formatted_timestamp,
            "event_type": event_type,
            "data_type": event_type  # Use event_type as data_type by default
        }
        
        # Further parsing will be done by source-specific subclasses
        return result
    
    @staticmethod
    def format_timestamp(timestamp: Union[float, int]) -> str:
        """
        Format a Unix timestamp to a human-readable string.
        
        Args:
            timestamp (Union[float, int]): The Unix timestamp
            
        Returns:
            str: The formatted timestamp string
        """
        dt = datetime.datetime.fromtimestamp(timestamp)
        return dt.strftime("%Y-%m-%d %H:%M:%S")
    
    @staticmethod
    def calculate_percent_change(current: Optional[float], 
                                reference: Optional[float]) -> Optional[float]:
        """
        Calculate percent change between two values.
        
        Args:
            current (Optional[float]): The current value
            reference (Optional[float]): The reference value
            
        Returns:
            Optional[float]: The percent change or None if calculation isn't possible
        """
        if current is not None and reference is not None and reference != 0:
            return (current - reference) / reference * 100
        return None
    
    @staticmethod
    def parse_delimited_string(text: str, delimiter: str = "|") -> Dict[str, str]:
        """
        Parse a delimiter-separated string into a dictionary.
        
        Args:
            text (str): The string to parse
            delimiter (str): The delimiter character
            
        Returns:
            Dict[str, str]: The parsed values
        """
        parts = text.split(delimiter)
        return {f"field_{i}": part for i, part in enumerate(parts)}